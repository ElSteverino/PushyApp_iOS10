{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs48 \cf2 NOTE for PushyApp_iOS10 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs36 \cf2 \
Notifications have changed between when the course was filmed and now (iOS 10), this  is my implementation of DJP3's PushyApp which has been updated for iOS 10 using the new User Notification Framework.  I have tried to document the code to explain how I understand the new system works. \
\
To get started, first the 
\i UserNotification
\i0  and 
\i UserNotificationUI
\i0  frameworks need to be added to the project and imported into the
\i ViewController.m
\i0  and 
\i AppDelegate.m
\i0  files. \
\
In iOS 10, the methods application:didReceiveLocalNotification: and 
\f1 \CocoaLigature0 application:handleActionWithIdentifier:forLocalNotification:completionHandler:
\f0  have been depreciated and are no longer used. DJP3's example uses the method 
\f1 application:didReceiveLocalNotification:
\f0  to handle notifications received while in the foreground and the method 
\f1 application:didFinishLaunchingWithOptions:
\f0  to check the 
\f1 UIApplicationLaunchOptionsLocalNotificationKey
\f0  to see if the App moved to the foreground as a result of a notification. This is depreciated in iOS 10.  Instead, \CocoaLigature1 notifications are handled by implementing the \CocoaLigature0 UNUserNotificationCenterDelegate protocol with two call backs.\
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f1 \cf2 userNotificationCenter:willPresentNotification:withCompletionHandler:
\f0 \CocoaLigature1  handles notifications received while the App is in the foreground.\
 \CocoaLigature0 \

\f1 userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
\f0  handles notifications received while the App is in the background. \
\
To handle the scenario where a notification has been delivered and the user opens the App from the home screen, we need to check if there have been delivered notifications that are still in the notification center. We do that when the App switches to the foreground using the applicationDidBecomeActive: method in AppDelegate.m\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \CocoaLigature1 This demonstration implements Action Notifications for two different \CocoaLigature0 UNNotificationCategory \CocoaLigature1 categories.  The first UI button schedules a notification 15 seconds in the future for 
\i \CocoaLigature0 UniqueCategoryID_1
\i0 \CocoaLigature1  with two notification actions, the second button does the same for 
\i \CocoaLigature0 UniqueCategoryID_2
\i0 \CocoaLigature1  with four notification actions. When the notifications arrive in the notification center, the user can swipe down to reveal the actions.  \
\
Notification actions are handled by the 
\f1 \CocoaLigature0 userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
\f0 \CocoaLigature1  method. The specific notification action is found in the \CocoaLigature0 response.actionIdentifier\CocoaLigature1  property.  In some cases we may need to know the categoryIdentifier of the notification we are responding two, that is found in the property 
\f1 \CocoaLigature0 response.notification.request.content.categoryIdentifier
\f0 \CocoaLigature1  (there may be a better way to get a notification's categoryIdentifier). \
\
Apple has an excellent WWDC 2016 video that covers the new notification system.\
\
https://developer.apple.com/videos/play/wwdc2016/707/\
https://developer.apple.com/reference/usernotifications/unusernotificationcenter\
\
Cheers,\
Steve}